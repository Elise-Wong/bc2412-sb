package com.bootcamp.customer.demo_sb_customer.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.bootcamp.customer.demo_sb_customer.controller.impl.CustomerControllerImpl;
import com.bootcamp.customer.demo_sb_customer.entity.CustomerEntity;

// JPA: Java object to SQL
// JPA + Driver (Postgresql)
// ! Hibernate generates the implementation class, which impluments "CustomerRepository"

@Repository //bean
public interface CustomerRepository extends JpaRepository<CustomerEntity, Long> {
  // ! During maven compilation, the implementation class is generated by Hibernate
  //JpaRepository included as follows:  ...因為Hibernate幫手做了
  //save()
  //saveAll()
  //findAll()
  //findById()
  //deleteById()
  // .. etc

  // controller -> service ->
  //Optional<CustomerControllerImpl> findByNameList()
  
  // ! JPA Method
  // ! findByXX 一定配Optional (因為可以find 唔到)
  //e.g.
  // select * from Customers where name = 'John';
  Optional<CustomerEntity> findByName(String name); // --> select * from Customers where name = 'John';
  // ! support both and & or
  Optional<CustomerEntity> findByNameAndEmail(String name, String email);
  //find id , 通常是唯一, 不會出list

  //how about return List?
 // List<CustomerEntity> findByName(String name);



  // ! JPQL (Entity)
  // CustomerEntity exactly same as the Entity class name
  // compiletime, it will be checked
@Query(value = "select c from CustomerEntity c where c.name = :name", nativeQuery = false) //因為entity.class 中有name // if true, 寫緊正常SQL
List<CustomerEntity> findByNameByJPQL(@Param ("name") String customerName);

  // ! Native Query = noraml SQL
  // product solution
  // compiletime, compile cant be checked!!!!!!
  // can Map
  // can not same as the Entity class name
  //c.customer_name (所以唔可以用where c.name, 而用where c.customer_name)
@Query(value = "select c.* from customers c where c.customer_name = :name", nativeQuery = true) //靠feild name, 所以唔可以用where c.name, 而用where c.customer_name
List<CustomerEntity> findByNameByNativeSQL(@Param ("name") String customerName);

  
}
